/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VehicleShiftService } from "../vehicleShift.service";
import { VehicleShiftCreateInput } from "./VehicleShiftCreateInput";
import { VehicleShift } from "./VehicleShift";
import { VehicleShiftFindManyArgs } from "./VehicleShiftFindManyArgs";
import { VehicleShiftWhereUniqueInput } from "./VehicleShiftWhereUniqueInput";
import { VehicleShiftUpdateInput } from "./VehicleShiftUpdateInput";

export class VehicleShiftControllerBase {
  constructor(protected readonly service: VehicleShiftService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VehicleShift })
  async createVehicleShift(
    @common.Body() data: VehicleShiftCreateInput
  ): Promise<VehicleShift> {
    return await this.service.createVehicleShift({
      data: {
        ...data,

        vehicle: data.vehicle
          ? {
              connect: data.vehicle,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        vehicle: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VehicleShift] })
  @ApiNestedQuery(VehicleShiftFindManyArgs)
  async vehicleShifts(@common.Req() request: Request): Promise<VehicleShift[]> {
    const args = plainToClass(VehicleShiftFindManyArgs, request.query);
    return this.service.vehicleShifts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        vehicle: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VehicleShift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async vehicleShift(
    @common.Param() params: VehicleShiftWhereUniqueInput
  ): Promise<VehicleShift | null> {
    const result = await this.service.vehicleShift({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        vehicle: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VehicleShift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVehicleShift(
    @common.Param() params: VehicleShiftWhereUniqueInput,
    @common.Body() data: VehicleShiftUpdateInput
  ): Promise<VehicleShift | null> {
    try {
      return await this.service.updateVehicleShift({
        where: params,
        data: {
          ...data,

          vehicle: data.vehicle
            ? {
                connect: data.vehicle,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          vehicle: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VehicleShift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVehicleShift(
    @common.Param() params: VehicleShiftWhereUniqueInput
  ): Promise<VehicleShift | null> {
    try {
      return await this.service.deleteVehicleShift({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          vehicle: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
