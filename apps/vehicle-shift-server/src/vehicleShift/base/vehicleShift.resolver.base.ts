/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VehicleShift } from "./VehicleShift";
import { VehicleShiftCountArgs } from "./VehicleShiftCountArgs";
import { VehicleShiftFindManyArgs } from "./VehicleShiftFindManyArgs";
import { VehicleShiftFindUniqueArgs } from "./VehicleShiftFindUniqueArgs";
import { CreateVehicleShiftArgs } from "./CreateVehicleShiftArgs";
import { UpdateVehicleShiftArgs } from "./UpdateVehicleShiftArgs";
import { DeleteVehicleShiftArgs } from "./DeleteVehicleShiftArgs";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { VehicleShiftService } from "../vehicleShift.service";
@graphql.Resolver(() => VehicleShift)
export class VehicleShiftResolverBase {
  constructor(protected readonly service: VehicleShiftService) {}

  async _vehicleShiftsMeta(
    @graphql.Args() args: VehicleShiftCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VehicleShift])
  async vehicleShifts(
    @graphql.Args() args: VehicleShiftFindManyArgs
  ): Promise<VehicleShift[]> {
    return this.service.vehicleShifts(args);
  }

  @graphql.Query(() => VehicleShift, { nullable: true })
  async vehicleShift(
    @graphql.Args() args: VehicleShiftFindUniqueArgs
  ): Promise<VehicleShift | null> {
    const result = await this.service.vehicleShift(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VehicleShift)
  async createVehicleShift(
    @graphql.Args() args: CreateVehicleShiftArgs
  ): Promise<VehicleShift> {
    return await this.service.createVehicleShift({
      ...args,
      data: {
        ...args.data,

        vehicle: args.data.vehicle
          ? {
              connect: args.data.vehicle,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => VehicleShift)
  async updateVehicleShift(
    @graphql.Args() args: UpdateVehicleShiftArgs
  ): Promise<VehicleShift | null> {
    try {
      return await this.service.updateVehicleShift({
        ...args,
        data: {
          ...args.data,

          vehicle: args.data.vehicle
            ? {
                connect: args.data.vehicle,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VehicleShift)
  async deleteVehicleShift(
    @graphql.Args() args: DeleteVehicleShiftArgs
  ): Promise<VehicleShift | null> {
    try {
      return await this.service.deleteVehicleShift(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Vehicle, {
    nullable: true,
    name: "vehicle",
  })
  async getVehicle(
    @graphql.Parent() parent: VehicleShift
  ): Promise<Vehicle | null> {
    const result = await this.service.getVehicle(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
