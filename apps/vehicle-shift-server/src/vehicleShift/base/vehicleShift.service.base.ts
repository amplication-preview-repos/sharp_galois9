/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  VehicleShift as PrismaVehicleShift,
  Vehicle as PrismaVehicle,
} from "@prisma/client";

export class VehicleShiftServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VehicleShiftCountArgs, "select">
  ): Promise<number> {
    return this.prisma.vehicleShift.count(args);
  }

  async vehicleShifts(
    args: Prisma.VehicleShiftFindManyArgs
  ): Promise<PrismaVehicleShift[]> {
    return this.prisma.vehicleShift.findMany(args);
  }
  async vehicleShift(
    args: Prisma.VehicleShiftFindUniqueArgs
  ): Promise<PrismaVehicleShift | null> {
    return this.prisma.vehicleShift.findUnique(args);
  }
  async createVehicleShift(
    args: Prisma.VehicleShiftCreateArgs
  ): Promise<PrismaVehicleShift> {
    return this.prisma.vehicleShift.create(args);
  }
  async updateVehicleShift(
    args: Prisma.VehicleShiftUpdateArgs
  ): Promise<PrismaVehicleShift> {
    return this.prisma.vehicleShift.update(args);
  }
  async deleteVehicleShift(
    args: Prisma.VehicleShiftDeleteArgs
  ): Promise<PrismaVehicleShift> {
    return this.prisma.vehicleShift.delete(args);
  }

  async getVehicle(parentId: string): Promise<PrismaVehicle | null> {
    return this.prisma.vehicleShift
      .findUnique({
        where: { id: parentId },
      })
      .vehicle();
  }
}
