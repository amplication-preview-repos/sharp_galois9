/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DriverShiftService } from "../driverShift.service";
import { DriverShiftCreateInput } from "./DriverShiftCreateInput";
import { DriverShift } from "./DriverShift";
import { DriverShiftFindManyArgs } from "./DriverShiftFindManyArgs";
import { DriverShiftWhereUniqueInput } from "./DriverShiftWhereUniqueInput";
import { DriverShiftUpdateInput } from "./DriverShiftUpdateInput";

export class DriverShiftControllerBase {
  constructor(protected readonly service: DriverShiftService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DriverShift })
  async createDriverShift(
    @common.Body() data: DriverShiftCreateInput
  ): Promise<DriverShift> {
    return await this.service.createDriverShift({
      data: {
        ...data,

        driver: data.driver
          ? {
              connect: data.driver,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        driver: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DriverShift] })
  @ApiNestedQuery(DriverShiftFindManyArgs)
  async driverShifts(@common.Req() request: Request): Promise<DriverShift[]> {
    const args = plainToClass(DriverShiftFindManyArgs, request.query);
    return this.service.driverShifts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        driver: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DriverShift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async driverShift(
    @common.Param() params: DriverShiftWhereUniqueInput
  ): Promise<DriverShift | null> {
    const result = await this.service.driverShift({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        driver: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DriverShift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDriverShift(
    @common.Param() params: DriverShiftWhereUniqueInput,
    @common.Body() data: DriverShiftUpdateInput
  ): Promise<DriverShift | null> {
    try {
      return await this.service.updateDriverShift({
        where: params,
        data: {
          ...data,

          driver: data.driver
            ? {
                connect: data.driver,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          driver: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DriverShift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDriverShift(
    @common.Param() params: DriverShiftWhereUniqueInput
  ): Promise<DriverShift | null> {
    try {
      return await this.service.deleteDriverShift({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          driver: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
