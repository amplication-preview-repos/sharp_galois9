/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DriverShift } from "./DriverShift";
import { DriverShiftCountArgs } from "./DriverShiftCountArgs";
import { DriverShiftFindManyArgs } from "./DriverShiftFindManyArgs";
import { DriverShiftFindUniqueArgs } from "./DriverShiftFindUniqueArgs";
import { CreateDriverShiftArgs } from "./CreateDriverShiftArgs";
import { UpdateDriverShiftArgs } from "./UpdateDriverShiftArgs";
import { DeleteDriverShiftArgs } from "./DeleteDriverShiftArgs";
import { Driver } from "../../driver/base/Driver";
import { DriverShiftService } from "../driverShift.service";
@graphql.Resolver(() => DriverShift)
export class DriverShiftResolverBase {
  constructor(protected readonly service: DriverShiftService) {}

  async _driverShiftsMeta(
    @graphql.Args() args: DriverShiftCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DriverShift])
  async driverShifts(
    @graphql.Args() args: DriverShiftFindManyArgs
  ): Promise<DriverShift[]> {
    return this.service.driverShifts(args);
  }

  @graphql.Query(() => DriverShift, { nullable: true })
  async driverShift(
    @graphql.Args() args: DriverShiftFindUniqueArgs
  ): Promise<DriverShift | null> {
    const result = await this.service.driverShift(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DriverShift)
  async createDriverShift(
    @graphql.Args() args: CreateDriverShiftArgs
  ): Promise<DriverShift> {
    return await this.service.createDriverShift({
      ...args,
      data: {
        ...args.data,

        driver: args.data.driver
          ? {
              connect: args.data.driver,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DriverShift)
  async updateDriverShift(
    @graphql.Args() args: UpdateDriverShiftArgs
  ): Promise<DriverShift | null> {
    try {
      return await this.service.updateDriverShift({
        ...args,
        data: {
          ...args.data,

          driver: args.data.driver
            ? {
                connect: args.data.driver,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DriverShift)
  async deleteDriverShift(
    @graphql.Args() args: DeleteDriverShiftArgs
  ): Promise<DriverShift | null> {
    try {
      return await this.service.deleteDriverShift(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Driver, {
    nullable: true,
    name: "driver",
  })
  async getDriver(
    @graphql.Parent() parent: DriverShift
  ): Promise<Driver | null> {
    const result = await this.service.getDriver(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
