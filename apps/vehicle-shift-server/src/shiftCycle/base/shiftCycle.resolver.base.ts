/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ShiftCycle } from "./ShiftCycle";
import { ShiftCycleCountArgs } from "./ShiftCycleCountArgs";
import { ShiftCycleFindManyArgs } from "./ShiftCycleFindManyArgs";
import { ShiftCycleFindUniqueArgs } from "./ShiftCycleFindUniqueArgs";
import { CreateShiftCycleArgs } from "./CreateShiftCycleArgs";
import { UpdateShiftCycleArgs } from "./UpdateShiftCycleArgs";
import { DeleteShiftCycleArgs } from "./DeleteShiftCycleArgs";
import { ShiftFindManyArgs } from "../../shift/base/ShiftFindManyArgs";
import { Shift } from "../../shift/base/Shift";
import { ShiftCycleService } from "../shiftCycle.service";
@graphql.Resolver(() => ShiftCycle)
export class ShiftCycleResolverBase {
  constructor(protected readonly service: ShiftCycleService) {}

  async _shiftCyclesMeta(
    @graphql.Args() args: ShiftCycleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ShiftCycle])
  async shiftCycles(
    @graphql.Args() args: ShiftCycleFindManyArgs
  ): Promise<ShiftCycle[]> {
    return this.service.shiftCycles(args);
  }

  @graphql.Query(() => ShiftCycle, { nullable: true })
  async shiftCycle(
    @graphql.Args() args: ShiftCycleFindUniqueArgs
  ): Promise<ShiftCycle | null> {
    const result = await this.service.shiftCycle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ShiftCycle)
  async createShiftCycle(
    @graphql.Args() args: CreateShiftCycleArgs
  ): Promise<ShiftCycle> {
    return await this.service.createShiftCycle({
      ...args,
      data: {
        ...args.data,

        shift: args.data.shift
          ? {
              connect: args.data.shift,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ShiftCycle)
  async updateShiftCycle(
    @graphql.Args() args: UpdateShiftCycleArgs
  ): Promise<ShiftCycle | null> {
    try {
      return await this.service.updateShiftCycle({
        ...args,
        data: {
          ...args.data,

          shift: args.data.shift
            ? {
                connect: args.data.shift,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ShiftCycle)
  async deleteShiftCycle(
    @graphql.Args() args: DeleteShiftCycleArgs
  ): Promise<ShiftCycle | null> {
    try {
      return await this.service.deleteShiftCycle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Shift], { name: "shifts" })
  async findShifts(
    @graphql.Parent() parent: ShiftCycle,
    @graphql.Args() args: ShiftFindManyArgs
  ): Promise<Shift[]> {
    const results = await this.service.findShifts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Shift, {
    nullable: true,
    name: "shift",
  })
  async getShift(@graphql.Parent() parent: ShiftCycle): Promise<Shift | null> {
    const result = await this.service.getShift(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
