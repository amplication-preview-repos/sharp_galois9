/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ShiftCycle as PrismaShiftCycle,
  Shift as PrismaShift,
} from "@prisma/client";

export class ShiftCycleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ShiftCycleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.shiftCycle.count(args);
  }

  async shiftCycles(
    args: Prisma.ShiftCycleFindManyArgs
  ): Promise<PrismaShiftCycle[]> {
    return this.prisma.shiftCycle.findMany(args);
  }
  async shiftCycle(
    args: Prisma.ShiftCycleFindUniqueArgs
  ): Promise<PrismaShiftCycle | null> {
    return this.prisma.shiftCycle.findUnique(args);
  }
  async createShiftCycle(
    args: Prisma.ShiftCycleCreateArgs
  ): Promise<PrismaShiftCycle> {
    return this.prisma.shiftCycle.create(args);
  }
  async updateShiftCycle(
    args: Prisma.ShiftCycleUpdateArgs
  ): Promise<PrismaShiftCycle> {
    return this.prisma.shiftCycle.update(args);
  }
  async deleteShiftCycle(
    args: Prisma.ShiftCycleDeleteArgs
  ): Promise<PrismaShiftCycle> {
    return this.prisma.shiftCycle.delete(args);
  }

  async findShifts(
    parentId: string,
    args: Prisma.ShiftFindManyArgs
  ): Promise<PrismaShift[]> {
    return this.prisma.shiftCycle
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .shifts(args);
  }

  async getShift(parentId: string): Promise<PrismaShift | null> {
    return this.prisma.shiftCycle
      .findUnique({
        where: { id: parentId },
      })
      .shift();
  }
}
